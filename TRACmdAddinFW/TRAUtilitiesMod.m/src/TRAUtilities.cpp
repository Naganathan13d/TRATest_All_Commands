// COPYRIGHT Dassault Systemes 2022
//===================================================================
//
// TRAUtilities.cpp
// Header definition of TRAUtilities
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Aug 2022  Creation: Code generated by the CAA wizard  Naga
//===================================================================
#include <iostream>
using namespace std;

#include "TRAUtilities.h"

//MecModInterfaces Framework
#include "CATIPrtContainer.h"
#include "CATIPartRequest.h"

// ObjectSpecsModeler Framework
#include "CATIDescendants.h"
#include "CATISpecObject.h"
#include "CATIAlias.h"      // to retrieve a specific body 

#include "CATLISTV_CATBaseUnknown.h" 
#include "CATFrmEditor.h"
#include "CATDocument.h"
#include "CATInit.h"
#include "CATIGSMTool.h"
#include "CATMmrLinearBodyServices.h"
#include "CATMfErrUpdate.h"







 
CATImplementClass( TRAUtilities,
                   Implementation, 
                   CATBaseUnknown,
                   CATNull );
 
//-----------------------------------------------------------------------------
// TRAUtilities : constructor
//-----------------------------------------------------------------------------
TRAUtilities::TRAUtilities():
    CATBaseUnknown()
{
}

//-----------------------------------------------------------------------------
// TRAUtilities : destructor
//-----------------------------------------------------------------------------
TRAUtilities::~TRAUtilities()
{
}
 
//-----------------------------------------------------------------------------
// TRAUtilities : copy constructor
//-----------------------------------------------------------------------------
TRAUtilities::TRAUtilities(TRAUtilities& original):
   CATBaseUnknown(original)
{
}
 
//-----------------------------------------------------------------------------
// TRAUtilities : equal operator
//-----------------------------------------------------------------------------
TRAUtilities& TRAUtilities::operator=(TRAUtilities& original)
{
   CATBaseUnknown::operator=(original);
   return *this;
}

// Creates  a new Part 
// ---------------------------------------------------------------------------
CATIPrtContainer* TRAUtilities::GetPartContainer() 
{    
    // Return Code Management 
    HRESULT rc = S_OK;

	CATFrmEditor *pEditor = NULL;
	pEditor = CATFrmEditor::GetCurrentEditor();

	CATDocument * _pDoc = NULL;
	_pDoc = pEditor->GetDocument();
    
    
    CATInit *piInitOnDoc =NULL;
    rc = _pDoc -> QueryInterface(IID_CATInit ,(void**)&piInitOnDoc);

	CATIPrtContainer * piPartContainer;
    
    if (NULL!= piInitOnDoc)
	{ 
        // Retrieve the Root Conatiner which responds to CATIPrtContainer 
        // interface.
         piPartContainer = (CATIPrtContainer*) piInitOnDoc -> GetRootContainer("CATIPrtContainer");	               

	}

	 return piPartContainer;  
    
}

CATDocument* TRAUtilities::GetCurrentDocument() 
{
	

	CATFrmEditor *pEditor = NULL;
	pEditor = CATFrmEditor::GetCurrentEditor();

	CATDocument * _pDoc = NULL;
	_pDoc = pEditor->GetDocument();

	return _pDoc;
}

HRESULT TRAUtilities::ObjectUpdate(const CATISpecObject_var & ispSpec)
{
    HRESULT rc = S_OK; 
    if ( NULL_var != ispSpec ) {
        // Declare a bloc where every exceptions will be catch and treated in
        // the CATCatch() block
        CATTry  {	
            
            // Update feature 
            ispSpec -> Update();
            
            //
            // Enhanced V5R13 : Manage linearity for OGS 
            // --------------------------------------------
            // check Linearity / usefull for absorbant feature inserted  in OGS 
            CATISpecObject_var spFather = ispSpec->GetFather();
            if ( NULL_var  != spFather )        {
                CATIGSMTool *piGSMToolFather = NULL;
                rc =spFather->QueryInterface ( IID_CATIGSMTool, (void**) &piGSMToolFather);
                if ( SUCCEEDED(rc) ) { 
                    int IsAnOGS = -1 ;
                    piGSMToolFather->GetType(IsAnOGS) ;
                    if ( 1 == IsAnOGS ) {
                        CATBaseUnknown_var spUnkwnSpec = ispSpec;
                        rc = CATMmrLinearBodyServices::Insert(spUnkwnSpec) ; 
                    } 
                    piGSMToolFather->Release() ; piGSMToolFather=NULL; 
                }   
                spFather -> Release() ; 
            }
            // End of update
            
            
        }
        
        // This block is specific for Update Errors
        CATCatch(CATMfErrUpdate,error)	 {
            cerr << " Update Error: " << (error-> GetDiagnostic()).ConvertToChar() << endl; 
            Flush(error) ; 
            return E_FAIL; 
        }
        // This block treats every other exception
        CATCatch(CATError,error)    {
            cerr << " Error: " << error->GetMessageText() <<endl; 
            Flush(error);
            return E_FAIL; 
        }
        CATEndTry;
        
    }
    return rc ; 
}
 
HRESULT TRAUtilities::CAAMcaGetGeometry(CATISpecObject_var ispModelPart, const CATUnicodeString iInputName,
				 CATBaseUnknown ** oInput)
{
  HRESULT rc = E_FAIL ;
  CATBoolean found = FALSE ;	

  if ( (NULL != oInput) && ( NULL_var != ispModelPart) )
  {   
     *oInput = NULL ;

     CATIPartRequest * pPartAsRequest = NULL ;
     rc = ispModelPart->QueryInterface(IID_CATIPartRequest,(void**)&pPartAsRequest);
     if ( SUCCEEDED(rc) )
     {
        // Retrieves all bodies
        CATListValCATBaseUnknown_var pListBodies  ;
        rc = pPartAsRequest->GetAllBodies("",pListBodies);
        if ( SUCCEEDED(rc) )
        {
           int iBodies =1 ;	  
           int nbbodies = pListBodies.Size();

           while ( (FALSE == found) && (iBodies <= nbbodies) )
           {
              CATIAlias_var spAliasBody = pListBodies[iBodies] ;
              if ( NULL_var != spAliasBody )
              {
                 CATUnicodeString currentbodyname = spAliasBody->GetAlias();

                 if ( iInputName == currentbodyname )
		 {
		   // We have found a body
		   found = TRUE ;
                   rc = spAliasBody->QueryInterface(IID_CATBaseUnknown,(void**)&(*oInput));
                 }else
                 {
                   // Research in the body
                   CATIDescendants * pIDescendants = NULL ;
                   rc =  spAliasBody->QueryInterface(IID_CATIDescendants,(void**)&pIDescendants);
		   if ( SUCCEEDED(rc) )
                   {
                      // finds a specific element in the body
		      int iChild=1 ;	  
		      int nbchild = pIDescendants->GetNumberOfChildren() ;

                      while (  (FALSE == found) && (iChild <= nbchild) )
                      {
                         CATIAlias_var spChild = pIDescendants->GetChildAtPosition(iChild) ;
                         if ( NULL_var != spChild )
                         {
                            CATUnicodeString currentchildname = spChild->GetAlias();

                            if ( iInputName == currentchildname )
                            {
                               // we have found a child of a body
			       found = TRUE ;
                               rc = spChild->QueryInterface(IID_CATBaseUnknown,(void**)&(*oInput));
			    }
                         }
                        iChild++ ;
                      }
					   
                      pIDescendants->Release();
		      pIDescendants = NULL ;
		   }
                 }
              }
              iBodies ++ ;               
           }
        }
        pPartAsRequest->Release();
        pPartAsRequest = NULL ;
     }
  }

  if ( TRUE == found )
  {
     rc =S_OK ;
  }
  return rc ;
}
