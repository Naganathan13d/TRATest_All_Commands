// COPYRIGHT Dassault Systemes 2022
//===================================================================
//
// TRAStCommand9.cpp
// The state chart based command: TRAStCommand9
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Aug 2022  Creation: Code generated by the CAA wizard  Naga
//===================================================================
#include "TRAStCommand9.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"

// dialog
#include "CATPathElementAgent.h"

// Visualization
#include "CATGraphicAttributeSet.h"
#include "CATPathElement.h"
#include "CATSO.h"

// ObjectSpecsModeler
#include "CATISpecObject.h"

// DraftingInterfaces
#include "CATIDrwDimDimension.h"
#include "CATIDrwDimValue.h"
#include "CATIDrwDimValueComponent.h"
#include "CATIDrwDimFormat.h"
#include "CATIDrwDimDimensionLine.h"
#include "CATIDrwDimExtensionLine.h"
#include "CATIDrwDimExtensionLineLinear.h"
#include "CATIDrwDimText.h"
#include "CATIDrwDimTolerance.h"
#include "CATDrwDimDefine.h"
#include "CATDrwDimEnum.h"
#include "CATIDrwTextProperties.h"
#include "CATDrwTextPropertiesEnum.h"

CATCreateClass( TRAStCommand9);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TRAStCommand9::TRAStCommand9() :
  CATStateCommand ("TRAStCommand9", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  ,_pObjectAgent(NULL)
{
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TRAStCommand9::~TRAStCommand9()
{
   if (_pObjectAgent != NULL) 
      _pObjectAgent->RequestDelayedDestruction();
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TRAStCommand9::BuildGraph()
{


  // Creation of the acquisition agent
   _pObjectAgent = new CATPathElementAgent("_pObjectAgent A");
   _pObjectAgent ->SetBehavior( CATDlgEngWithPrevaluation | 
                               CATDlgEngMultiAcquisition | 
                               CATDlgEngWithCSO); 

   // We want to select dimensions
   _pObjectAgent ->AddElementType("CATIDrwDimDimension");
   AddCSOClient(_pObjectAgent);
   
   //  States definition
   CATDialogState* state1 = GetInitialState("Sel dimension");
   state1->AddDialogAgent(_pObjectAgent);
   
   // Transition definition
   AddTransition(state1, NULL, IsOutputSetCondition(_pObjectAgent),
                 Action((ActionMethod)&TRAStCommand9::DressUp, NULL, NULL));
}


//-------------------------------------------------------------------------
// DressUp ()
//-------------------------------------------------------------------------
boolean TRAStCommand9::DressUp( void *data )
{
 // We get the Selected set of objects
   CATSO* pObjSO = _pObjectAgent->GetListOfValues(); 
   CATPathElement *pElemPath = NULL;

    if (pObjSO)  
   {

      // There is a selection, we will scan it from the beginning
      pObjSO->InitElementList();
      while (NULL != (pElemPath = (CATPathElement*)pObjSO->NextElement()))
       {
         // Make sure the element is dimension
         CATIDrwDimDimension *piDim = (CATIDrwDimDimension *)pElemPath->FindElement(IID_CATIDrwDimDimension);

		  if (NULL != piDim)
         {            
            // Usefull to convert RGBA(4 int)<->RGBA(1 int)
            CATGraphicAttributeSet attrSet;

            // Set a rectangle frame on the dimension value
            // ----------------------------------------------------
            CATIDrwTextProperties_var spTextProperties = piDim;
            spTextProperties->SetFontSize(5);
            spTextProperties->SetFontColor(255, 0, 0, 255);
            spTextProperties->SetFrameType(CATDrwRectangle);

			 // Display dual value in side by side mode
            // --------------------------------------------
            piDim->ShowDualValue();
            // Get the dim value
            CATIDrwDimValue_var spDimValue = piDim->GetValue();
            spDimValue->SetDualValueDisplay(CATDrwDimDualSideBySide);

			 // Add Tolerance on the main value
            // -------------------------------------

            // Get the main value of dimension
            CATIDrwDimValueComponent_var spMainValue = spDimValue->GetFaceComponent();

            // Get tolerance of main value
            CATIDrwDimTolerance_var toleranceMain =spMainValue->GetTolerance();

            // Set alphanumeric tolerance
            toleranceMain->SetToleranceType(2) ;

            // Set tolerance description
            CATUnicodeString tolName("TOL_ALP2");
            toleranceMain -> SetLabel( tolName );

            // Set tolerance values
            piDim->AddTolerance("h7","g6",1,1);

			 // Add associated texts on the main value
            // ---------------------------------------------
            CATIDrwDimText_var spMainText = spMainValue->GetText();
            spMainText->SetPSText("L=", "");
            spMainText->SetBAULText("", "", "Up", "Down");

            // Change unit format for the dual value
            // -------------------------------------------
            CATIDrwDimValueComponent_var spDualValue = spDimValue->GetDualComponent();
            CATIDrwDimFormat_var spDualFormat = spDualValue->GetFormat();
            spDualFormat->SetUnit(CATDrwDimUnitINCH);

			 // Modify graphic properties for Dimension Line
            // ----------------------------------------------------
            CATIDrwDimDimensionLine_var spDimLine = piDim->GetDimensionLine();
            attrSet.SetColorRGBA(255,0,0,255);
            spDimLine->SetGraphicParameters(attrSet.GetColorRGBA(), 0.2);
            spDimLine->SetSymbol(CATDrwDimSymbCircledCross,CATDrwDimSymbCircledCross);
            attrSet.SetColorRGBA(0,255,0,255);
            spDimLine->SetSymbolsGraphicParameters(attrSet.GetColorRGBA(), 0.1, 
                                                   attrSet.GetColorRGBA(), 0.1);

            // Modify graphic properties for Extension Line
            // ----------------------------------------------------
            CATIDrwDimExtensionLine_var spExtLine = piDim->GetExtensionLine();
            attrSet.SetColorRGBA(0,255,255,255);
            spExtLine->SetGraphicParameters(attrSet.GetColorRGBA(), 0.2);
            spExtLine->SetGap(4);
            spExtLine->SetOverRun(4);

            // Add funnel on the first extension line
            // --------------------------------------------
            CATIDrwDimExtensionLineLinear_var spLinearExtLine = spExtLine;
            spLinearExtLine->SetFunnel(1);
            
            // Let's update the dimension after spec modifications
            CATISpecObject_var spDimSpec = piDim;
            spDimSpec->Update();


			piDim->Release();
            piDim=NULL;
         }
      }
      
      _pObjectAgent -> InitializeAcquisition();
      return TRUE;
   }



  return TRUE;
}
