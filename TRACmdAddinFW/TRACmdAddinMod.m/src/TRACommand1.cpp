// COPYRIGHT Dassault Systemes 2022
//===================================================================
//
// TRACommand1.cpp
// The command: TRACommand1
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Aug 2022  Creation: Code generated by the CAA wizard  Naga
//===================================================================
#include <iostream>
using namespace std;

#include "TRACommand1.h"
#include "TRAUtilities.h"

#include "CATSessionServices.h" 
#include "CATDocumentServices.h"         // Open, Save
#include "CATInit.h"                     // To retrieve the root container
#include "CATDocument.h"

// MechanicalCommands Framework
#include "CATIUdfFactory.h"              // To retrieve the list of User Features
#include "CATIUdfInstantiate.h"          // To instantiate a new User Features   

//ObjectSpecsModeler Framework
#include "CATISpecObject.h"              // For the parameters 
#include "CATIAlias.h"                   // To retrieve the name of some features

//MecModInterfaces Framework
#include "CATIPrtContainer.h"            // The root container

//LiteralFeatures Framework
#include "CATICkeParm.h"                 // To edit the parameters

// Visualization Framework
#include "CATPathElement.h"              // To set the destination path

// System Framework
#include "CATString.h"
#include "CATListOfCATUnicodeString.h"

#include "CATCreateExternalObject.h"
CATCreateClass( TRACommand1);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TRACommand1::TRACommand1() :
  CATCommand (NULL, "TRACommand1")
{
  RequestStatusChange (CATCommandMsgRequestExclusiveMode);
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TRACommand1::~TRACommand1()
{
}


//  Overload this method: when your command gains focus
//
// Activates a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC TRACommand1::Activate( CATCommand * iFromClient, CATNotification * iEvtDat)
{
	// 1. document into which the User Feature reference will be instantiated
  CATDocument *pCAAUdfModel = NULL;
  CATString CAAUdfModelDocName = "D:\\Working\\CAAUdfModel.CATPart";

  HRESULT rc = CATDocumentServices::OpenDocument(CAAUdfModelDocName.CastToCharPtr(), pCAAUdfModel);

  if (FAILED(rc) )
  {
     cout << "ERROR in opening the document= "<< CAAUdfModelDocName.CastToCharPtr() << endl ;
     
  }else
  {
     cout << "   " << CAAUdfModelDocName.CastToCharPtr() << " is the document into which" ;
     cout << " the User Feature will be instantiated" << endl << endl;
  }

  // 2. document which contains the User Feature reference
  CATDocument *pCAAUdfLoft = NULL;
  CATString CAAUdfLoftDocName = "D:\\Working\\CAAUdfLoft.CATPart";

  rc = CATDocumentServices::OpenDocument(CAAUdfLoftDocName.CastToCharPtr(), pCAAUdfLoft);

  if (FAILED(rc) )
  {
     cout << "ERROR in opening the document= "<< CAAUdfLoftDocName.CastToCharPtr() << endl ;
     
  }else
  {
     // This lock is mandatory 
     // The CAAUdfModel document will have a link to CAAUdfLoft after the
     // instantiation, so to avoid the destruction of CAAUdfLoft
     // when removing CAAUdfModel, lock it
     CATLockDocument(*pCAAUdfLoft);

     cout << "   " << CAAUdfLoftDocName.CastToCharPtr() ;
     cout << " is the document which contains a User Feature" << endl << endl;
  }

  //---------------------------------------------------
  // 3- Retrieves the root containers of each model
  //---------------------------------------------------

  // For the first document 
  // ----------------------
  CATInit *pInitOnDoc = NULL ;
  rc = pCAAUdfModel->QueryInterface(IID_CATInit,(void **) &pInitOnDoc);
  if ( FAILED(rc) )
  {
     cout << "Error in the CATInit interface"<< endl;
     
  }

  CATIPrtContainer *pIPrtContOnCAAUdfModel = NULL ;
  pIPrtContOnCAAUdfModel = (CATIPrtContainer*)pInitOnDoc->GetRootContainer("CATIPrtContainer");

  if ( NULL == pIPrtContOnCAAUdfModel )
  {
     cout << "The root container is NULL"<< endl;
     
  }

  // No more need of this interface
  pInitOnDoc->Release();
  pInitOnDoc = NULL ;

  // For the second document 
  // -----------------------
  rc = pCAAUdfLoft->QueryInterface(IID_CATInit,(void **) &pInitOnDoc);
  if ( FAILED(rc) )
  {
     cout << "Error in the CATInit interface"<< endl;
     
  }

  CATIPrtContainer * pIPrtContOnCAAUdfLoft = NULL ;
  pIPrtContOnCAAUdfLoft = (CATIPrtContainer*)pInitOnDoc->GetRootContainer("CATIPrtContainer");

  if ( NULL == pIPrtContOnCAAUdfLoft )
  {
     cout << "The root container is NULL"<< endl;
     
  }

  // No more need of this interface
  pInitOnDoc->Release();
  pInitOnDoc = NULL ;

  // 4 - Retrieves the Mechanical Part of the CAAUdfModel
  CATISpecObject_var spSpecObjectCAAUdfModelPart = pIPrtContOnCAAUdfModel->GetPart();

  CATBaseUnknown_var spCAAUdfModelPart = spSpecObjectCAAUdfModelPart ;
  CATBaseUnknown* pCAAUdfModelPart= (CATBaseUnknown*)spCAAUdfModelPart;
 
  pIPrtContOnCAAUdfModel->Release();
  pIPrtContOnCAAUdfModel = NULL ;

  //-------------------------------------------------------------------
  // 5- Retrieves the User Feature reference in the CAAUdfLoft document
  //-------------------------------------------------------------------

  // 5-1 Retrieves CATIUdfFactory interface pointer to the root container
  // --------------------------------------------------------------------
  CATIUdfFactory *pIUdfFactory = NULL ;
  rc = pIPrtContOnCAAUdfLoft->QueryInterface(IID_CATIUdfFactory,(void **) &pIUdfFactory);
  if ( FAILED(rc) )
  {
     cout << "Error in the CATIUdfFactory interface"<< endl;
     
  }

  // No more need of this CATIPrtContainer interface pointer
  pIPrtContOnCAAUdfLoft->Release();
  pIPrtContOnCAAUdfLoft = NULL ;

  // -------------------------------------------------------
  // 5-2 Retrieves the User Feature reference to instantiate
  // -------------------------------------------------------
  
  CATIUdfInstantiate * pIUdfInstantiate = NULL ;

  CATListValCATISpecObject_var * pListUserFeature = NULL ;
  pListUserFeature = pIUdfFactory->GetUserFeatureList();

  if  ( (NULL != pListUserFeature) && (pListUserFeature->Size() ==1 ) &&
	    (NULL_var != (*pListUserFeature)[1]) )
  {
     // CAAUdfLoft contains only one User Feature reference
     //
     CATISpecObject_var spUserFeature =  (*pListUserFeature)[1] ;
     rc = spUserFeature->QueryInterface(IID_CATIUdfInstantiate,(void **)&pIUdfInstantiate);
     if ( SUCCEEDED(rc) )
     {
        cout << "   We have found the User Feature Set and the name of " ;
	cout << "the User Feature to instantiate is " ;

        CATIAlias_var spAlias = (*pListUserFeature)[1] ;
        cout << (spAlias->GetAlias()).CastToCharPtr() << endl << endl;

	delete pListUserFeature ;
	pListUserFeature = NULL ;
     }else
     {
        cout << " Error in the CATIUdfInstantiate method" << endl;
        
     }
  }else
  {
     cout << "The " << CAAUdfLoftDocName.CastToCharPtr() ;
     cout << " should contain a feature set" << endl;
     
  }

  pIUdfFactory->Release();
  pIUdfFactory = NULL ;

  // ------------------------------------------------------
  // 5-3 Retrieves, for information, the role of each input
  // ------------------------------------------------------
  
  CATListOfCATUnicodeString * pListOfInputRole = NULL ;
  CATListValCATBaseUnknown_var * pListOfInput = NULL  ;

  // The result of this method is independent of an instantiation
  // So we can call it out the instantiation scope. 
  // Caution: for a power copy, this call must be only done after the
  // SetDestinationPath call
  //
  rc = pIUdfInstantiate->GetOldInputs(pListOfInput,pListOfInputRole);
  if ( FAILED(rc) || ( NULL ==pListOfInput ) || ( NULL== pListOfInputRole ) )
  {
     cout << " Error in the GetListInputs method" << endl ;
     
  }          
  // List of roles not needed any longer
  delete pListOfInput ;
  pListOfInput = NULL ;

  //------------------------
  // 6- First Instantiation
  //------------------------

  cout << "   First Instantiation begins" << endl << endl ;

  // 6-1 Sets the destination path
  // ----------------------------

  CATPathElement PathFirstInstantiate1(pCAAUdfModelPart); 

  // In this case the 2 last values are set to null
  CATPathElement * FirstUIactiveObject1 = NULL ;
  CATBaseUnknown_var FirstDest1 = NULL_var ; 

  rc = pIUdfInstantiate->SetDestinationPath(&PathFirstInstantiate1,
                                             FirstUIactiveObject1,
                                             FirstDest1); 
  if ( FAILED(rc) )
  {
     cout << " Error in the SetDestinationPath method" << endl;
     
  }

  if ( NULL != FirstUIactiveObject1 ) 
  {
      FirstUIactiveObject1->Release();
      FirstUIactiveObject1 = NULL ;
  }
  
  // 6-2 Gives input
  // ---------------------

  // 6-2-1 Sets new inputs
  // --------------------

  // First input: Point.3 is retrieved in the CAAUdfModel thanks to the CAAMcaGetGeometry function
  CATBaseUnknown * pInput1 = NULL ;
  rc = pTraUtilities->CAAMcaGetGeometry(spSpecObjectCAAUdfModelPart,"Point.3",&pInput1);
  if ( FAILED(rc) )
  {
     cout << "The document doesn't contain the feature Point.3" << endl ;
     
  }
  
  CATPathElement * pPathFirstInput1 = new CATPathElement(pInput1);
  rc = pIUdfInstantiate->SetNewInput(1,pPathFirstInput1);
  if ( FAILED(rc) )
  {
     cout << " Error in the SetNewInput method" << endl;
     
  }
  pPathFirstInput1->Release();
  pPathFirstInput1 = NULL ;

  pInput1->Release();
  pInput1 = NULL ;

  // Second input: Point.1 is retrieved in the CAAUdfModel thanks to the CAAMcaGetGeometry function
  rc = pTraUtilities->CAAMcaGetGeometry(spSpecObjectCAAUdfModelPart,"Point.1",&pInput1);
  if ( FAILED(rc) )
  {
     cout << "The document doesn't contain the feature Point.1" << endl ;
     
  }
  
  CATPathElement * pPathSecondInput1 = new CATPathElement(pInput1);
  rc = pIUdfInstantiate->SetNewInput(2,pPathSecondInput1);
  if ( FAILED(rc) )
  {
     cout << " Error in the SetNewInput method" << endl;
    
  }
  pPathSecondInput1->Release();
  pPathSecondInput1 = NULL ;

  pInput1->Release();
  pInput1 = NULL ;

  // 6-2-2 Checks and displays the new inputs 
  // ----------------------------------------

  CATBaseUnknown_var spOnFirstInput1 = pIUdfInstantiate->GetNewInput(1);
  CATBaseUnknown_var spOnSecondInput1 = pIUdfInstantiate->GetNewInput(2);
  if ( (NULL_var == spOnFirstInput1)  || (NULL_var == spOnSecondInput1) ) 
  {
     cout << " Error in the GetNewInput method" << endl;
     
  }
  CATIAlias_var spAliasForFirstInput1 = spOnFirstInput1 ;
  CATIAlias_var spAliasForSecondInput1 = spOnSecondInput1 ;

  cout << "      After SetNewInput, the first instance has 2 inputs:" << endl;
  cout << "       value of " << (*pListOfInputRole)[1].ConvertToChar() << " = " ;
  cout << (spAliasForFirstInput1->GetAlias()).CastToCharPtr() << endl ;
  cout << "       value of " << (*pListOfInputRole)[2].ConvertToChar() << " = " ;
  cout << (spAliasForSecondInput1->GetAlias()).CastToCharPtr() << endl << endl ;

  // 6-3 Instantiates in the document 
  // ---------------------------------
  
  // The path of the Part to set the new User Feature is defined by the
  // SetDestinationPath, so you can set NULL_var as argument
  // Caution before the R11: for a power copy set the path of the Part, the
  // first argument of the SetDestinationPath method
  rc = pIUdfInstantiate->Instantiate(NULL_var);
  if ( FAILED(rc) )
  {
     cout << " Error in the Instantiate method" << endl;
     
  }

  // 6-4 Retrieves the new instance pointer
  // ---------------------------------------
  
  // This call must be used between Instantiate and EndInstantiate
  // but the pointer can be used after the instantiation process
  // 
  CATBaseUnknown_var spFirstInstance = NULL_var ;
  spFirstInstance = pIUdfInstantiate->GetInstantiated(pIUdfInstantiate);
  if ( NULL_var == spFirstInstance )
  {
     cout << " Error in the GetInstantiated method" << endl;
    
  }

  // 6-5 Ends the current instantiation
  // ----------------------------------

  rc = pIUdfInstantiate->EndInstantiate();
  if ( FAILED(rc) )
  {
     cout << " Error in the EndInstantiate method" << endl;
     
  }

  cout << "   First Instantiation is ended" << endl << endl ;

   //------------------------
  // 7- Second Instantiation
  //------------------------

  cout << "   Second Instantiation begins" << endl << endl ;

  // 7-1 Sets the destination path
  // ----------------------------

  CATPathElement PathFirstInstantiate2(pCAAUdfModelPart); 

  CATPathElement * FirstUIactiveObject2 = NULL ;
  CATBaseUnknown_var FirstDest2= NULL_var ; 
  
  rc = pIUdfInstantiate->SetDestinationPath(&PathFirstInstantiate2,
                                             FirstUIactiveObject2,
					 FirstDest2); 
  if ( FAILED(rc) )
  {
     cout << " Error in the SetDestinationPath method" << endl;
     
  }

  if ( NULL != FirstUIactiveObject2 ) 
  {
      FirstUIactiveObject2->Release();
      FirstUIactiveObject2 = NULL ;
  }
  
  // 7-2 Gives input
  // ---------------------

  // 7-2-1 Sets the second input thanks to UseIdenticalName
  // -----------------------------------------------------

  rc = pIUdfInstantiate->UseIdenticalName(spCAAUdfModelPart);
  if ( FAILED(rc) )
  {
     cout << " Error in the UseIdenticalName method" << endl;
     
  }
  
  CATBaseUnknown_var spOnFirstInput2 = pIUdfInstantiate->GetNewInput(1);
  if ( NULL_var != spOnFirstInput2 )
  {
     cout << " Error in the GetNewInput 1 method" << endl;
     
  }

  CATBaseUnknown_var spOnSecondInput2 = pIUdfInstantiate->GetNewInput(2);
  if (  NULL_var == spOnSecondInput2 )
  {
     cout << " Error in the GetNewInput 2 method" << endl;
     
  }

  // 7-2-2 Sets the first input thanks to SetNewInput
  // ------------------------------------------------

  // First input: Point.3 is retrieved in the CAAUdfModel thanks to the CAAMcaGetGeometry function
  CATBaseUnknown * pInput2 = NULL ;
  rc = pTraUtilities->CAAMcaGetGeometry(spSpecObjectCAAUdfModelPart,"Point.3",&pInput2);
  if ( FAILED(rc) )
  {
     cout << "The document doesn't contain the feature Point.3" << endl ;
     
  }
  
  CATPathElement * pPathFirstInput2 = new CATPathElement(pInput2);
  rc = pIUdfInstantiate->SetNewInput(1,pPathFirstInput2);
  if ( FAILED(rc) )
  {
     cout << " Error in the SetNewInput method" << endl;
     
  }
  pPathFirstInput2->Release();
  pPathFirstInput2 = NULL ;

  pInput2->Release();
  pInput2 = NULL ;
  
  spOnFirstInput2 = pIUdfInstantiate->GetNewInput(1);
  if ( (NULL_var == spOnFirstInput2) ) 
  {
     cout << " Error in the GetNewInput method" << endl;
     
  }

  // 6-2-2 Displays the new inputs 
  // -----------------------------

  CATIAlias_var spAliasForFirstInput2 = spOnFirstInput2 ;
  CATIAlias_var spAliasForSecondInput2 = spOnSecondInput2 ;

  cout << "      After SetNewInput, the first instance has 2 inputs:" << endl;
  cout << "       value of " << (*pListOfInputRole)[1].ConvertToChar() << " = " ;
  cout << (spAliasForFirstInput2->GetAlias()).CastToCharPtr() << endl ;
  cout << "       value of " << (*pListOfInputRole)[2].ConvertToChar() << " = " ;
  cout << (spAliasForSecondInput2->GetAlias()).CastToCharPtr() << endl << endl ;

  // 6-3 Changes parameters values 
  // -----------------------------

  CATListValCATBaseUnknown_var * pListParam = NULL ;
  CATListOfCATUnicodeString    * pListParamRole = NULL ;
  rc = pIUdfInstantiate->GetParameters(pListParam,pListParamRole);

  if ( SUCCEEDED(rc) && ( NULL != pListParam)  )
  {
     int nbparam = pListParam->Size();
     if ( 2 == nbparam )
     {
        cout << "      The instance contains 2 parameters" << endl;
        for ( int i=1 ; i <= 2 ; i++ )
        {
           CATICkeParm_var spCkeParm = (*pListParam)[i] ;
           if ( NULL_var != spCkeParm)
           {
              CATUnicodeString oldvalue = spCkeParm->Show();
              cout << "       Role for the " << i << "ith parameter is " ;
              cout << " its old value=" << oldvalue.CastToCharPtr() ;

              // Valuate is in MKS unit
              spCkeParm->Valuate(i*0.010f);
              CATUnicodeString newvalue = spCkeParm->Show();
              cout << " and the new value=" << newvalue.CastToCharPtr() << endl;
           }else
           {
              cout << " The param " << i << " should implement CATICkeParm " << endl;
           }
        }
        cout << endl;
     }else
     {
        cout << " The parameter's count is not valid, the document is not consistent" << endl;
        
     }

     delete pListParam ; 
     pListParam = NULL ;
  
     delete pListParamRole ;
     pListParamRole = NULL ;
  }else
  {
     cout << " pbme with GetParameters method" << endl;
     
  }

  // 7-4 Instantiates in the document 
  // ------------------------------

  // The path of the Part to set the new User Feature is defined by the
  // SetDestinationPath, so you can set NULL_var as argument
  // Caution before the R11: for a power copy set the path of the Part, the
  // first argument of the SetDestinationPath method
  rc = pIUdfInstantiate->Instantiate(NULL_var);
  if ( FAILED(rc) )
  {
     cout << " Error in the Instantiate method" << endl;
     
  }


  // 7-5 Changes the display name
  // ----------------------------

  CATUnicodeString NewName = "The Loft With Point2 and Point3";
  rc = pIUdfInstantiate->SetDisplayName(NewName);
  if ( FAILED(rc) )
  {
     cout << " Error in the SetDisplayName method" << endl;
     
  }

  // 7-6 Retrieves the new instance pointer
  // ---------------------------------------
  
  // This call must be used between Instantiate and EndInstantiate
  // but the pointer can be used after the instantiation process
  // 
  CATBaseUnknown_var spSecondInstance = NULL_var ;
  spSecondInstance = pIUdfInstantiate->GetInstantiated(pIUdfInstantiate);
  if ( NULL_var == spSecondInstance )
  {
     cout << " Error in the GetInstantiated method" << endl;
     
  }

  // 7-7 Ends the current instantiation
  // ----------------------------------

  rc = pIUdfInstantiate->EndInstantiate();
  if ( FAILED(rc) )
  {
     cout << " Error in the EndInstantiate method" << endl;
    
  }

  cout << "   Second Instantiation is ended" << endl << endl ;

  // ----------------------------
  // 7-8 Ends the instantiations
  // ----------------------------

  // List not any longer needed
  delete pListOfInputRole ;
  pListOfInputRole = NULL ;

  // Pointer not any longer needed
  pIUdfInstantiate->Release();
  pIUdfInstantiate = NULL ;

  // ----------------------------
  // 8- Updates the new instances
  // ----------------------------

  // 8-1 First instance

  CATISpecObject_var spSpecObj1 = spFirstInstance ;

  CATTry
  {
     spSpecObj1->Update();
  }
  CATCatch(CATError,error)
  {
     cout<< error->GetNLSMessage().CastToCharPtr() << endl;
     Flush(error);
     
  }
  CATEndTry

	    // 8-2 First instance

   CATISpecObject_var spSpecObj2 = spSecondInstance ;
  CATTry
  {
     spSpecObj2->Update();
  }
  CATCatch(CATError,error)
  {
     cout<< error->GetNLSMessage().CastToCharPtr() << endl;
     Flush(error);
     
  }
  CATEndTry

  return (CATStatusChangeRCCompleted);
}

//  Overload this method: when your command loses focus
//
// Deactivates a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC TRACommand1::Desactivate( CATCommand * iFromClient, CATNotification * iEvtDat)
{
  return (CATStatusChangeRCCompleted);
}

//  Overload this method: when your command is canceled
//
// Cancel a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC TRACommand1::Cancel( CATCommand * iFromClient, CATNotification * iEvtDat)
{
  RequestDelayedDestruction();
  return (CATStatusChangeRCCompleted);
}
