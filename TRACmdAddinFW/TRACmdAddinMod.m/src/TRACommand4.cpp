// COPYRIGHT Dassault Systemes 2022
//===================================================================
//
// TRACommand4.cpp
// The command: TRACommand4
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Aug 2022  Creation: Code generated by the CAA wizard  Naga
//===================================================================
#include "TRACommand4.h"

#include "TRAUtilities.h"

#include "CATCreateExternalObject.h"
#include "CATIPrtPart.h"
#include "CATIPrtContainer.h"
#include "CATISpecObject.h"

#include "CATCreateExternalObject.h"
#include "CATIContainer.h"
#include "CATIMechanicalRootFactory.h"
#include "CATSettingRepository.h"
#include "CATUnicodeString.h"




CATCreateClass( TRACommand4);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TRACommand4::TRACommand4() :
  CATCommand (NULL, "TRACommand4")
{
  RequestStatusChange (CATCommandMsgRequestExclusiveMode);
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TRACommand4::~TRACommand4()
{
}


//  Overload this method: when your command gains focus
//
// Activates a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC TRACommand4::Activate( CATCommand * iFromClient, CATNotification * iEvtDat)
{
	_piPartContainer = _pTRAUtilities->GetPartContainer();

	CATIPrtContainer_var          spPartCont   = _piPartContainer;

	CATIPrtPart_var               spPart       = spPartCont -> GetPart();

	CATIContainer_var             spCont       = _piPartContainer ;

	CATIMechanicalRootFactory_var spMechRoot = spCont ;

	 CATISpecObject_var spSpecTool;  

	 CATISpecObject_var spParentForGSMTool = spPart;

	 CATUnicodeString iName = CreateGeomSetName();

	HRESULT rc = spMechRoot -> CreateGeometricalSet(iName,spParentForGSMTool,spSpecTool,0);

  return (CATStatusChangeRCCompleted);
}

CATUnicodeString TRACommand4::CreateGeomSetName()
{
	int count=10;
    CATSettingRepository * pSettingRepository; // instantiate a repository
    pSettingRepository = CATSettingRepository::GetRepository("Naga"); // get a repository by its name
    // read settings
    pSettingRepository->ReadSetting("CountValue",&count);

	pSettingRepository->Commit();
    count = count + 1;
    pSettingRepository->WriteSetting("CountValue",&count);
	pSettingRepository->Commit();
	pSettingRepository->SaveRepository();

	pSettingRepository->ReadSetting("CountValue",&count);

	CATUnicodeString SeqCount;
	SeqCount.BuildFromNum(count);
	CATUnicodeString string1 = "Naga";

	CATUnicodeString result  = string1 + SeqCount ;

	return result;

}




//  Overload this method: when your command loses focus
//
// Deactivates a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC TRACommand4::Desactivate( CATCommand * iFromClient, CATNotification * iEvtDat)
{
  return (CATStatusChangeRCCompleted);
}

//  Overload this method: when your command is canceled
//
// Cancel a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC TRACommand4::Cancel( CATCommand * iFromClient, CATNotification * iEvtDat)
{
  RequestDelayedDestruction();
  return (CATStatusChangeRCCompleted);
}
