// COPYRIGHT Dassault Systemes 2022
//===================================================================
//
// TRAStCommand8.cpp
// The state chart based command: TRAStCommand8
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Aug 2022  Creation: Code generated by the CAA wizard  Naga
//===================================================================
#include "TRAStCommand8.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"
// System
#include "CATBaseUnknown.h"
#include "CATCreateExternalObject.h"

// Visualization
#include "CATPathElementAgent.h"
#include "CATPathElement.h"
#include "CATSO.h"

// DraftingInterface
#include "IDMCircle2D.h"
#include "CATIDrwCenterLine.h"
#include "CATIDrwAnnotationFactory.h"
CATCreateClass( TRAStCommand8);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TRAStCommand8::TRAStCommand8() :
  CATStateCommand ("TRAStCommand8", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  ,_pObjectAgent(NULL)
{
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TRAStCommand8::~TRAStCommand8()
{
   if (_pObjectAgent != NULL) 
      _pObjectAgent->RequestDelayedDestruction();
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TRAStCommand8::BuildGraph()
{


 // Creation of the acquisition agent
   _pObjectAgent = new CATPathElementAgent("_pObjectAgent A");

   _pObjectAgent ->SetBehavior( CATDlgEngWithPrevaluation | 
                               CATDlgEngMultiAcquisition | 
                               CATDlgEngWithCSO); 

   // We only want to get circles
   _pObjectAgent ->AddElementType("IDMCircle2D");
   AddCSOClient(_pObjectAgent);

    //  States definition
   CATDialogState* pState1 = GetInitialState("Sel circle");
   pState1->AddDialogAgent(_pObjectAgent);

   // Transition definition
   AddTransition(pState1, NULL, IsOutputSetCondition(_pObjectAgent),
                 Action((ActionMethod)&TRAStCommand8::CreateCtrLine, NULL, NULL));



}


boolean TRAStCommand8::CreateCtrLine(void *iData)
{ 
   CATSO* pObjSO = _pObjectAgent->GetListOfValues(); 
   CATPathElement *pElemPath = NULL;
   
   if (NULL != pObjSO)  
   {
      // We will scan the CSO from the begining
      pObjSO->InitElementList();
      while (NULL != (pElemPath = (CATPathElement*)pObjSO->NextElement())  )
      {
         
         // Make sure the element is a circle type
         // Thi circle can be interactive or a generative result (from part, model, ...)
         IDMCircle2D *piElementRef = (IDMCircle2D *)pElemPath->FindElement(IID_IDMCircle2D);
         
         if (NULL != piElementRef)
         {
            // Find the annotation factory (on the view)
            CATIDrwAnnotationFactory *piDrwFact = (CATIDrwAnnotationFactory *)pElemPath->FindElement(IID_CATIDrwAnnotationFactory);
            if (NULL != piDrwFact)
            {
               // Let's create the center line
               piDrwFact->CreateDrwCenterLine((CATBaseUnknown *)piElementRef);
               piDrwFact->Release(); piDrwFact=NULL;
            }
            piElementRef->Release(); piElementRef=NULL;
         }
      }
      
      _pObjectAgent -> InitializeAcquisition();
      return TRUE;
   }
   return FALSE;
}