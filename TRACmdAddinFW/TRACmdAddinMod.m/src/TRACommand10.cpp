// COPYRIGHT Dassault Systemes 2022
//===================================================================
//
// TRACommand10.cpp
// The command: TRACommand10
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Aug 2022  Creation: Code generated by the CAA wizard  Naga
//===================================================================
#include "TRACommand10.h"

#include "CATCreateExternalObject.h"
#include "CATFrmEditor.h"

// System
#include <iostream.h>
#include "CATLib.h" 
#include "CATUnicodeString.h"

// ObjectSpecsModeler
#include "CATISpecObject.h"

// ObjectModelerBase
#include "CATDocument.h"
#include "CATDocumentServices.h"
#include "CATSessionServices.h" 

// SketcherInterfaces
#include "CATI2DPoint.h"

// MechanicalModeler
#include "CATIDescendants.h"

// DraftingInterfaces
#include "CATIDftDocumentServices.h"
#include "CATIDrawing.h"
#include "CATISheet.h"
#include "CATIView.h"
#include "CATIDrwAnnotationFactory.h"
#include "CATIDftText.h"
#include "CATIDftTextProperties.h"
#include "CATIDrwSubString.h"


CATCreateClass( TRACommand10);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TRACommand10::TRACommand10() :
  CATCommand (NULL, "TRACommand10")
{
  RequestStatusChange (CATCommandMsgRequestExclusiveMode);
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TRACommand10::~TRACommand10()
{
}


//  Overload this method: when your command gains focus
//
// Activates a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC TRACommand10::Activate( CATCommand * iFromClient, CATNotification * iEvtDat)
{
	CATFrmEditor *pEditor = NULL;
	pEditor = CATFrmEditor::GetCurrentEditor();
	
	CATDocument* pDoc = NULL;
    pDoc = pEditor->GetDocument();

	 // Gets the drawing feature using the CATIDftDocumentServices interface
   CATIDrawing *piDrawing = NULL;
   CATIDftDocumentServices *piDftDocServices = NULL;
   HRESULT rc = pDoc->QueryInterface(IID_CATIDftDocumentServices, (void **)&piDftDocServices);
   if(SUCCEEDED(rc))
   {
      piDftDocServices->GetDrawing(IID_CATIDrawing, (void **)&piDrawing);
      piDftDocServices->Release(); piDftDocServices=NULL;
   }

   // We can get the current sheet
   CATISheet_var spSheet = piDrawing->GetCurrentSheet();
   // And the sheet current view
   CATIView_var spCurrentView = spSheet->GetCurrentView();

   // Memory cleaning
   piDrawing->Release(); piDrawing=NULL;

    // GEOMETRY RETRIEVAL
   // ==================

   // Now we do seek all the points in the view
   CATIDescendants_var spDesc = spCurrentView;
   CATListValCATISpecObject_var pointList;
   spDesc->GetDirectChildren ("CATI2DPoint",pointList);

   // TEXT CREATION
   // =============

   // loop on points 
   for (int ii=1; ii<=pointList.Size(); ii++)
   {
      // Gets the coordinates
      CATI2DPoint_var spPoint = pointList[ii];
      double coord[2];
      spPoint->GetPointData(coord);
      // Compute the string
      CATUnicodeString textString("Point ");
      CATUnicodeString index;
      index.BuildFromNum(ii);
      textString += index;
      int titleLength = textString.GetLengthInChar();
      textString.Append("\n");
      textString.Append("X = ");
      CATUnicodeString coordText[2];
      coordText[0].BuildFromNum(coord[0]);
      textString.Append(coordText[0]);
      textString.Append("\n");
      textString.Append("Y = ");
      coordText[1].BuildFromNum(coord[1]);
      textString.Append(coordText[1]);

	    // Creates the Text
      CATIDrwAnnotationFactory_var spAnnFactory = spCurrentView;
      CATIDftText *piDftText = NULL;
      const double txtpos[2] = {coord[0]+10.0,coord[1]+10.0};
      if (SUCCEEDED(spAnnFactory->CreateDftText(txtpos, &piDftText)))
      {
         wchar_t *ptxtChar = new wchar_t[textString.GetLengthInChar()+1];
         textString.ConvertToWChar(ptxtChar);
         piDftText->SetString(ptxtChar);
         delete [] ptxtChar;
         ptxtChar = NULL; 
         CATIDrwSubString *piDrwSubString = NULL;
         if (SUCCEEDED(piDftText->QueryInterface(IID_CATIDrwSubString,(void **)&piDrwSubString)))
         {
            // Select the sub string to modifiable.
            piDrwSubString->SetSelection(1,8);

            // Modify the properties
            CATIDftTextProperties *piTextProp = NULL;
            if (SUCCEEDED(piDftText->GetTextProperties(&piTextProp)))
            {
               piTextProp->SetBold(TRUE);
               piTextProp->SetUnderline(TRUE);
               piTextProp->Release();piTextProp=NULL;
            }
            piDrwSubString->Release();piDrwSubString=NULL;
         }
         piDftText->Release();piDftText=NULL;
      }
   }

    // Let's update the Text 
            CATISpecObject_var spViewObj = spCurrentView;
            spViewObj->Update();



  return (CATStatusChangeRCCompleted);
}

//  Overload this method: when your command loses focus
//
// Deactivates a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC TRACommand10::Desactivate( CATCommand * iFromClient, CATNotification * iEvtDat)
{
  return (CATStatusChangeRCCompleted);
}

//  Overload this method: when your command is canceled
//
// Cancel a command.
//   iFromClient :The command that requests to activate the current one.
//   iEvtDat :The notification sent.
// ----------------------------------------------------
CATStatusChangeRC TRACommand10::Cancel( CATCommand * iFromClient, CATNotification * iEvtDat)
{
  RequestDelayedDestruction();
  return (CATStatusChangeRCCompleted);
}
